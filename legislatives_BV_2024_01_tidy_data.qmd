---
title: "Elections législatives 2024 (1er et second tour) - BV"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

[Résultats des élections législatives du 30 juin 2024](https://www.data.gouv.fr/fr/datasets/elections-legislatives-des-30-juin-et-7-juillet-2024-resultats-definitifs-du-1er-tour/)

[Résultats des élections législatives du 7 juillet 2024](https://www.data.gouv.fr/fr/datasets/elections-legislatives-des-30-juin-et-7-juillet-2024-resultats-definitifs-du-2nd-tour/)


```{r}
#| label: load_packages
#| echo: true 
#| warning: false
library(tidyverse)
library(readxl)

```

### Définitions des chemins et noms de fichiers par défaut (fonction du tour)

```{r}

default_path <- function(tour) {
  
  return(paste("data", "legislatives_2024", paste0("tour_", tour), sep = "/"))
  
}

excel_file_path <- function(tour) {
  
  excel_name_file <- "resultats-definitifs-par-bureau-de-vote.xlsx"
  excel_file_path <- paste(default_path(tour), excel_name_file, sep = "/")
  return(excel_file_path)
  
}

RDS_file_path <- function(tour) {
  
  return(
    paste(default_path(tour), paste0("legislatives_BV_tour_", tour, ".RDS"), sep = "/")
  )
  
}

```

### Fonction d'import des données excel

::: {.callout-note collapse="false"}

Le paramètre `col_types` de la fonction `read_xlsx` est positionné à "text" car certaines colonnes se retrouvent être considérées comme étant de type "logical" alors qu'elles contiennent du texte comme les colonnes `Elu xxx`  

:::

```{r}
#| label: first_integration
#| echo: true
#| eval: true

import_xlsx <- function(tour) {
  
  path <- default_path(tour)
  if (file.exists(excel_file_path(tour))) {
    tib <- read_xlsx(excel_file_path(tour), col_types = "text")
  } else {
    tib <- NULL
  }
  return(tib)
  
}
  
```

### Fonctions de transformations

- Transformations des `,` en `.` pour toutes les colonnes nommées `%...`

```{r}

replace_coma_with_point <- function(tib) {
  
  tib <- tib |> 
    mutate(
      across(.cols = starts_with("%"),
           ~ gsub(pattern = ",", replacement = ".", x = .x))
    )
  return(tib)
  
}

```

- Transformations des `,` en `.` pour toutes les colonnes nommées `%...`

```{r}

delete_percentage_symbol <- function(tib) {
  
  tib <- tib |> 
    mutate(
      across(.cols = starts_with("%"),
           ~ gsub(pattern = "%", replacement = "", x = .x))
    )
  return(tib)
  
}

```

- Transformation en nombre des données de certaines colonnes

```{r}

transform_to_numeric <- function(tib) {

  colonnes <- c("Inscrits","Votants","Abstentions","Exprimés","Blancs","Nuls")
  tib <- tib |> 
    mutate(across(.cols = starts_with("%"), ~ as.numeric(.x))) |> 
    mutate(across(all_of(colonnes), ~ as.numeric(.x))) |> 
    mutate(across(.cols = starts_with("Voix"), ~ as.numeric(.x)))
  return(tib)
  
}

```

- Renommage des noms de colonnes

```{r}

rename_column_names <- function(tib) {
  
  names(tib)[1:5] <- c("code_dep", "lib_dep", "code_com", "lib_com", "code_BV")
  
  # on supprime les espaces en trop pour pouvoir appliquer pivot_longer
  # sur les données relatives à chaque candidat

  pattern = "%\\s"
  replacement = "%"
  names(tib) <-
    gsub(names(tib), pattern = pattern, replacement = replacement)

  pattern = "candidat\\s"
  replacement = ""
  names(tib) <- 
    gsub(names(tib), pattern = pattern, replacement = replacement)

  pattern = "Numéro\\s+de\\s+panneau"
  replacement = "Numéro_panneau"
  names(tib) <- 
    gsub(names(tib), pattern = pattern, replacement = replacement)
  
  return(tib)
    
}

```

- Application du pivot longer pour avoir un candidat par ligne

```{r}

pivot_data <- function(tib) {
  
  tib <- tib |>
    pivot_longer(
      cols = starts_with(c(
        "Numéro_panneau", "Nuance", "Nom", "Prénom", "Sexe",
        "Voix", "%Voix/inscrits", "%Voix/exprimés", "Elu"
         )),
      names_to = c(".value", "Candidat"),
      names_sep = " " # <- option la plus importante !!!
    )
  return(tib)

}

```

- Suppression des lignes sans candidat

```{r}

delete_lines_without_candidat <- function(tib) {
  
  return(tib |> filter(!is.na(Numéro_panneau)))

}

```

### Chargement, formatage, traitement et sauvegarde RDS des données excel

```{r}

tidy_data <- function(tour) {

  tib <- import_xlsx(tour)
  tib <- replace_coma_with_point(tib)
  tib <- delete_percentage_symbol(tib)
  tib <- transform_to_numeric(tib)
  tib <- rename_column_names(tib)
  tib <- pivot_data(tib)
  tib <- delete_lines_without_candidat(tib)
  saveRDS(tib, file = RDS_file_path(tour))

}

```


```{r}

tidy_data(tour = 1)
tidy_data(tour = 2)

```

