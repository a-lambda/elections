---
title: "elections"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

## Elections européennes 2024

[Résultats des élections européennes du 9 juin 2024](https://www.data.gouv.fr/fr/datasets/resultats-des-elections-europeennes-du-9-juin-2024/#/resources)

```{r}

library(tidyverse)
library(readxl)

```

```{r}
#|label: first_integration
#|include: false
#|eval: false

# resultats <- read_xlsx("data/resultats-definitifs-par-commune.xlsx")
# str(resultats)
# saveRDS(resultats, "data/resultats_ori.RDS")

```

```{r}
#|label: load_RDS

resultats <- readRDS("data/resultats_ori.RDS")

```

1. Transformation de toutes les colonnes % en valeurs numériques avec séparateur "."

```{r}

tib <- resultats |> 
  mutate(
    across(.cols = starts_with("%"),
           ~ gsub(pattern = ",", replacement = ".", x = .x))
  ) |> 
  mutate(
    across(.cols = starts_with("%"),
           ~ gsub(pattern = "%", replacement = "", x = .x))
  ) |> 
  mutate(
    across(.cols = starts_with("%"),
           ~ as.numeric(.x))
  )

```

2. Vérification des colonnes pourcentages avant suppression

  - récupération du nom des colonnes à considérer
  
```{r}
  
names_pourcentages <- tib |> 
  select(starts_with("%")) |>  
  names()
names_pourcentages

```

::: {.callout-note collapse="false"}

Attention la fonction `round(x, digits = 2` renvoie $53,12$ au lieu de $53,13$ lorsque x vaut $53,125$ par exemple

:::

  - calcul des pourcentages globaux

    1. par rapport aux inscrits 
      
      - "% Votants", "% Abstentions", "% Exprimés/inscrits", "% Blancs/inscrits", "% Nuls/inscrits"
    
    2. par rapport aux votants 
    
      - "% Exprimés/votants", "% Blancs/votants", "% Nuls/votants"


::: {.callout-danger collapse="false"}

Attention, dans la mise en place de la fonction `get_percentages` ne pas oublier de prendre en compte la possibilité que le dénominateur puisse être égal à 0 !!!

Ce qui en l'occurrence s'avère être le cas pour le nombre de votants dans certaines communes hors métropole.

:::

```{r}

get_percentages <- function(tib, result_col, col_num, col_denum, after_col) {
  result <- tib |> 
    mutate(!!result_col := if_else(
      .data[[col_num]] != 0,
      round(100 * (.data[[col_num]]/.data[[col_denum]]), digits = 2),
      0)) %>%
    relocate(!!result_col, .after = after_col)
  return(result)
}

# calcul des pourcentages par rapport aux inscrits

col_denum <- "Inscrits"
col_num <- c("Votants", "Abstentions", "Exprimés", "Blancs", "Nuls")
after_col <- c("% Votants", "% Abstentions", "% Exprimés/inscrits", "% Blancs/inscrits", "% Nuls/inscrits")
result_col <- str_to_lower(after_col)

for (i in 1:5) {
  
  tib <- get_percentages(tib, result_col[i], col_num[i], col_denum, after_col[i])
  
}

# calcul des pourcentages par rapport aux votants

col_denum <- "Votants"
col_num <- c("Exprimés", "Blancs", "Nuls")
after_col <- c("% Exprimés/votants", "% Blancs/votants", "% Nuls/votants")
result_col <- str_to_lower(after_col)

for (i in 1:3) {
  
  tib <- get_percentages(tib, result_col[i], col_num[i], col_denum, after_col[i])
  
}

```  

::: {.callout-note collapse="false"}

Le fait d'utiliser |> au lieu de %>% génère le message suivant :

Avis : Using an external vector in selections was deprecated in tidyselect 1.1.0.
ℹ Please use `all_of()` or `any_of()` instead.
  # Was:
  data %>% select(after_col)

  # Now:
  data %>% select(all_of(after_col))

See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.

:::

  - Calcul des pourcentages par parti
  
    1. par rapport aux inscrits 
    
      - "% voix/inscrits xx"
      
    2. par rapport aux exprimés
    
      - "% voix/inscrits xx"

```{r}

inscrits <- "Inscrits"
exprimes <- "Exprimés"

for (i in 1:38) {

  # nom de colonnes existantes servant pour le calcul
  col_voix <- paste("Voix", i)
  col_Voix_sur_inscrits <- paste("% Voix/inscrits", i)
  col_Voix_sur_exprimes <- paste("% Voix/exprimés", i)
  # nom de colonnes calculées
  col_voix_sur_inscrits <- paste("% voix/inscrits", i)
  col_voix_sur_exprimes <- paste("% voix/exprimés", i)
  # insertion des pourcentages voix/inscrits pour chaque parti
  tib <- get_percentages(tib, col_voix_sur_inscrits, col_voix, inscrits, col_Voix_sur_inscrits)
  # insertion des pourcentages voix/exprimés pour chaque parti
  tib <- get_percentages(tib, col_voix_sur_exprimes, col_voix, exprimes, col_Voix_sur_exprimes)

}

```

  - vérification des pourcentages présentés par rapport aux pourcentages recalculés
  
```{r}

tib_col_percentages <- tib |> 
  select(starts_with("%"))

indices_cols_to_compare <- seq(1, ncol(tib_col_percentages), by = 2)
indices_calculated_cols <- seq(2, ncol(tib_col_percentages), by = 2)

# calcul de la somme des différences entre % initiaux et % recalculés

diff_cols <-
  map2(indices_cols_to_compare,
       indices_calculated_cols,
       \(x1, x2) {sum(tib_col_percentages[x1] - tib_col_percentages[x2])}
  ) |> 
  unlist()

max(diff_cols)

```

3. Suppression des colonnes pourcentages et sauvegarde dans un fichier intermédiaire

```{r}

tib_without_percentages <- tib |> 
  select(!starts_with("%"))

```

4. Sélection des données utiles

```{r}

tib_utile <- tib_without_percentages |>
   select("Code département":"Nuls", starts_with(c("Voix", "Sièges"))) |> 
   pivot_longer(
    cols = starts_with(c("Voix", "Sièges")),
    names_to = c(".value", "Parti"),
    names_sep = " "
  )
head(tib_utile)

```

5. Récupération des données sur les partis

```{r}

tib_partis <- tib_without_percentages |> 
  select(matches("[0-9]")) |> 
  select(!starts_with(c("Voix", "Sièges"))) |> 
  unique() |> 
  pivot_longer(
    cols = everything(),
    names_to = c(".value", "Parti"),
    names_pattern = '([a-zà-üA-Z\\s]+) ([0-9]+)'
  )
head(tib_partis)

```

6 - Jointure entre les données utiles et les données de parti

```{r}

tib_final <- tib_utile |> 
  inner_join(tib_partis)
head(tib_final)

```

7 - Représentation géographique

