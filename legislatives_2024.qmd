---
title: "Elections législatives 2024 (1er et second tour)"
format: html
editor: source
editor_options: 
  chunk_output_type: console
---

[Résultats des élections législatives du 30 juin 2024](https://www.data.gouv.fr/fr/datasets/elections-legislatives-des-30-juin-et-7-juillet-2024-resultats-definitifs-du-1er-tour/)

[Résultats des élections législatives du 7 juillet 2024](https://www.data.gouv.fr/fr/datasets/elections-legislatives-des-30-juin-et-7-juillet-2024-resultats-definitifs-du-2nd-tour/)


```{r}
#| label: load_packages
#| echo: true 
#| warning: false
library(tidyverse)
library(readxl)

```

### Récupération des données et sauvegarde au formet RDS

::: {.callout-note collapse="false"}

Le paramètre `col_types` de la fonction `read_xlsx` est positionné à "text" car certaines colonnes se retrouvent être considérées comme étant de type "logical" alors qu'elles contiennent du texte comme les colonnes `Elu xxx`  

:::

```{r}
#| label: first_integration
#| echo: true
#| eval: true

import_raw_data <- function(tour) {
  default_path = paste(
    "data", 
    "legislatives_2024", 
    paste0("tour_", tour),
    sep = "/"
  )
  RDS_file <- paste(default_path,
                    paste0("resultats_tour_", tour, ".RDS"),
                    sep = "/")
  excel_name_file <- switch(
    tour,
    "resultats-definitifs-par-communes.xlsx",
    "resultats-definitifs-par-commune.xlsx"
  )
  excel_file <- paste(default_path, excel_name_file, sep = "/")
  if (!file.exists(RDS_file)) {
    resultat <- read_xlsx(excel_file, col_types = "text")
    saveRDS(resultat, file = RDS_file)
  } else {
    resultat <- readRDS(file = RDS_file)
  }
  return(resultat)
}

resultat <- import_raw_data(tour = 1)

```

### Transformation de toutes les colonnes % en valeurs numériques avec séparateur "."

```{r}

percentage_columns_to_numeric <- function(df) {
  tib <- df |> 
  mutate(
    across(.cols = starts_with("%"),
           ~ gsub(pattern = ",", replacement = ".", x = .x))
  ) |> 
  mutate(
    across(.cols = starts_with("%"),
           ~ gsub(pattern = "%", replacement = "", x = .x))
  ) |> 
  mutate(
    across(.cols = starts_with("%"),
           ~ as.numeric(.x))
  )
  return(tib)
}

tib <- percentage_columns_to_numeric(resultat)

```

### Vérification des colonnes pourcentages avant suppression

  - récupération du nom des colonnes à considérer
  
```{r}
  
names_pourcentages <- tib |> 
  select(starts_with("%")) |>  
  names()
names_pourcentages

```

::: {.callout-note collapse="false"}

Attention la fonction `round(x, digits = 2` renvoie $53,12$ au lieu de $53,13$ lorsque x vaut $53,125$ par exemple

:::

  - calcul des pourcentages globaux

    1. par rapport aux inscrits 
      
      - "% Votants", "% Abstentions", "% Exprimés/inscrits", "% Blancs/inscrits", "% Nuls/inscrits"
    
    2. par rapport aux votants 
    
      - "% Exprimés/votants", "% Blancs/votants", "% Nuls/votants"


::: {.callout-caution collapse="false"}

Attention, dans la mise en place de la fonction `get_percentages` ne pas oublier de prendre en compte la possibilité que le dénominateur puisse être égal à 0 !!!

Ce qui en l'occurrence s'avère être le cas pour le nombre de votants dans certaines communes hors métropole.

:::

```{r}

get_percentages <- function(tib, result_col, col_num, col_denum, after_col) {
  result <- tib |> 
    mutate(!!result_col := if_else(
      .data[[col_num]] != 0,
      round(100 * (.data[[col_num]]/.data[[col_denum]]), digits = 2),
      0)) %>%
    relocate(!!result_col, .after = after_col)
  return(result)
}

```

- Transformation préalable des colonnes suivantes au format numérique :

  - "Inscrits", "Votants", "Abstentions", "Exprimés", "Blancs", et "Nuls"

```{r}

colonnes <- c("Inscrits","Votants","Abstentions","Exprimés","Blancs","Nuls")

tib <- tib |> mutate(across(all_of(colonnes), ~ as.numeric(.x)))

```

- calcul des pourcentages généraux par rapport aux inscrits

```{r}

col_denum <- "Inscrits"
col_num <- c("Votants", "Abstentions", "Exprimés", "Blancs", "Nuls")

after_col <- c(
  "% Votants", "% Abstentions", 
  "% Exprimés/inscrits", "% Blancs/inscrits", "% Nuls/inscrits"
)
result_col <- str_to_lower(after_col)

for (i in 1:5) {
  
  tib <- get_percentages(tib, result_col[i], col_num[i], col_denum, after_col[i])
  
}

```

- calcul des pourcentages par rapport aux votants

```{r}

col_denum <- "Votants"
col_num <- c("Exprimés", "Blancs", "Nuls")
after_col <- c("% Exprimés/votants", "% Blancs/votants", "% Nuls/votants")
result_col <- str_to_lower(after_col)

for (i in 1:3) {
  
  tib <- get_percentages(tib, result_col[i], col_num[i], col_denum, after_col[i])
  
}

```

::: {.callout-note collapse="false"}

Le fait d'utiliser |> au lieu de %>% génère le message suivant :

Avis : Using an external vector in selections was deprecated in tidyselect 1.1.0.
ℹ Please use `all_of()` or `any_of()` instead.
  # Was:
  data %>% select(after_col)

  # Now:
  data %>% select(all_of(after_col))

See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.

:::

- Calcul des pourcentages par candidat
  
  1. par rapport aux inscrits 
    
    - "% voix/inscrits xx"
      
  2. par rapport aux exprimés
    
    - "% voix/inscrits xx"

- Transformation préalable en nombre des colonnes commençant par "Voix"

```{r}

tib <- tib |> mutate(across(.cols = starts_with("Voix"), ~ as.numeric(.x)))

```


```{r}

inscrits <- "Inscrits"
exprimes <- "Exprimés"

# le nombre de candidats à traiter est :
# (total colonnes du fichier initial - 18) / 9
# 
n_col <- (ncol(resultat) - 18) / 9

for (i in 1:n_col) {

  # nom de colonnes existantes servant pour le calcul
  col_voix <- paste("Voix", i)
  col_Voix_sur_inscrits <- paste("% Voix/inscrits", i)
  col_Voix_sur_exprimes <- paste("% Voix/exprimés", i)
  # nom de colonnes calculées
  col_voix_sur_inscrits <- paste("% voix/inscrits", i)
  col_voix_sur_exprimes <- paste("% voix/exprimés", i)
  # insertion des pourcentages voix/inscrits pour chaque parti
  tib <- get_percentages(tib, col_voix_sur_inscrits, col_voix, inscrits, col_Voix_sur_inscrits)
  # insertion des pourcentages voix/exprimés pour chaque parti
  tib <- get_percentages(tib, col_voix_sur_exprimes, col_voix, exprimes, col_Voix_sur_exprimes)

}

```

- vérification des pourcentages présentés par rapport aux pourcentages recalculés
  
```{r}

tib_col_percentages <- tib |> 
  select(starts_with("%"))

indices_cols_to_compare <- seq(1, ncol(tib_col_percentages), by = 2)
indices_calculated_cols <- seq(2, ncol(tib_col_percentages), by = 2)

# calcul de la somme des différences entre % initiaux et % recalculés

diff_cols <-
  map2(indices_cols_to_compare,
       indices_calculated_cols,
       \(x1, x2) {sum(tib_col_percentages[x1] - tib_col_percentages[x2], na.rm = TRUE)}
  ) |> 
  unlist()

max(diff_cols, na.rm = TRUE)

```

### Suppression des colonnes pourcentages et sauvegarde dans un fichier intermédiaire

```{r}

tib_without_percentages <- tib |> 
  select(!starts_with("%"))

```

### Sélection des données utiles

```{r}

names(tib_without_percentages) <- 
gsub(
  names(tib_without_percentages), 
  pattern = "candidat\\s", 
  replacement = ""
)

names(tib_without_percentages) <- 
gsub(
  names(tib_without_percentages), 
  pattern = "Numéro\\s+de\\s+panneau", 
  replacement = "Numéro_panneau"
)

tib_utile <- tib_without_percentages |>
   select("Code département":"Nuls", starts_with(c("Voix", "Elu", "Nuance", "Nom", "Prénom", "Sexe", "Numéro_panneau"))) |> 
   pivot_longer(
    cols = starts_with(c("Voix", "Elu", "Nuance", "Nom", "Prénom", "Sexe", "Numéro_panneau")),
    names_to = c(".value", "Candidat"),
    names_sep = " "
  )

head(tib_utile)

```

- Filtrage de l'absence de candidat sur le filtre `!is.na(Numéro_panneau)`

```{r}

tib_final <- tib_utile |> 
  filter(!is.na(Numéro_panneau))

```

::: {.callout-note collapse="false"}

Pour le premier tour des législtatives 2024 on passe ainsi d'un fichier contenant $204\times 35232=7187328$ (après utilisation de `pivot_longer`) à un fichier contenant $222254$ lignes après élimination des lignes contenant des panneaux inexistants (donc des lignes sans candidat) 

:::


# *************************
# la suite est à construire
# *************************


### Récupération des données sur les partis

```{r}

tib_partis <- tib_without_percentages |> 
  select(matches("[0-9]")) |> 
  select(!starts_with(c("Voix", "Sièges"))) |> 
  unique() |> 
  pivot_longer(
    cols = everything(),
    names_to = c(".value", "Parti"),
    names_pattern = '([a-zà-üA-Z\\s]+) ([0-9]+)'
  )
head(tib_partis)

```

### Jointure entre les données utiles et les données de parti

```{r}

tib_final <- tib_utile |> 
  inner_join(tib_partis)
head(tib_final)

```

### Représentation géographique









